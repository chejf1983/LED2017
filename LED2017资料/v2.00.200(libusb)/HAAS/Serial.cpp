// Serial.cpp: implementation of the Serial class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "Serial.h"
#include "math.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

Serial::Serial()
{
	m_pProComm=NULL;
}

Serial::~Serial()
{

}

BOOL Serial::Open(HANDLE &CommDev,CString sCom, int iBaudRate)
{
	DCB dcb;
	CommDev=CreateFile(sCom,GENERIC_READ|GENERIC_WRITE,0,NULL,OPEN_EXISTING,0,NULL);
	
	if(CommDev==INVALID_HANDLE_VALUE) 
		return FALSE;
	if(GetCommState(CommDev,&dcb)==FALSE)
	    return FALSE;

 	dcb.BaudRate=iBaudRate;
	dcb.Parity=NOPARITY;//
	dcb.ByteSize=8;
	dcb.StopBits=ONESTOPBIT;
	dcb.fRtsControl=RTS_CONTROL_DISABLE;
	if(SetCommState(CommDev,&dcb)==FALSE) 
	    return FALSE;
    SetupComm(CommDev,4096*10,4096*10);
	return TRUE;
}

BOOL Serial::Close(HANDLE &CommDev)
{
	return CloseHandle(CommDev);
}

BOOL Serial::SetReadTime(HANDLE &CommDev, int iReadIntervalTimeOut, int iReadTotalTimeoutMultiplier, int iReadTotalTimeoutConstant)
{
	COMMTIMEOUTS tout;
	if(GetCommTimeouts(CommDev,&tout)==FALSE)
		return FALSE;
	tout.ReadIntervalTimeout=iReadIntervalTimeOut;     
	tout.ReadTotalTimeoutMultiplier=iReadTotalTimeoutMultiplier; 
    tout.ReadTotalTimeoutConstant=iReadTotalTimeoutConstant; 
    //tout.WriteTotalTimeoutMultiplier; 
    //tout.WriteTotalTimeoutConstant; 
	if(SetCommTimeouts(CommDev,&tout)==FALSE)
		return FALSE;
	return TRUE;

}

BOOL Serial::Output(HANDLE &CommDev, BYTE *OutData, DWORD OutN)
{
	DWORD N;	
	BOOL bR;
	bR=WriteFile(CommDev,OutData,OutN,&N,NULL);
	return bR;
}

BOOL Serial::Input(HANDLE &CommDev, BYTE *InData, DWORD InN)
{
	BOOL bR;
	DWORD N;
	bR=ReadFile(CommDev,InData,InN,&N,NULL);
	return bR;

// 	DWORD N;
// 	BOOL bR;
// 	for(int i=0;i<(int)InN;i++)
// 	{
// 		BYTE In[1];		
// 		bR=ReadFile(CommDev,In,1,&N,NULL);
// 		if(!bR||N<1)
// 		{
// 			if(m_pProComm!=NULL)
// 			{
// 				m_pProComm->SetPos(0);
// 				m_pProComm->ShowWindow(FALSE);
// 			}
// 			return FALSE;
// 		}
// 		else
// 		{
// 			InData[i]=In[0];
// 			if(m_pProComm!=NULL)
// 				m_pProComm->SetPos(i+1);
// 		}
// 	}
// 	return TRUE;
}

void Serial::WordToByte(WORD Word, BYTE &hByte, BYTE &lByte)
{
	lByte=BYTE(Word);
	Word=Word>>8;
	hByte=BYTE(Word);
}

float Serial::btof196(BYTE *bb)
{
	char sig;
	union zho
	{unsigned char str[4];
	float flt;
	unsigned long zhon;
	}zho;

	/*float  *flt;
	unsigned long  *zhon;
	unsigned char str[4];*/
	unsigned char zhog;
	sig=bb[3];
	sig&=0x80;/*printf("%d\n",sig);*/
	if(bb[0]==0) 
		zho.str[3]=bb[0];
	else
		zho.str[3]=(bb[0]-1);
	zhog=zho.str[3];
	zho.str[2]=bb[3]&0x7f;
	zho.str[1]=bb[2];
	zho.str[0]=bb[1];
	/*zhon=&str[0];*/ /*printf("%ld\n",*zhon);*/
	zho.zhon=zho.zhon<<1;		/*printf("%ld\n",zho.zhon);*/
	zho.str[3]=zhog;
	zho.zhon=zho.zhon>>1;
	zho.str[3]|=sig;
	/*flt=&str[0];*/
	return(zho.flt);
}

float Serial::btof(BYTE *bb)
{
 float var;
 struct bytes
       {
	unsigned bt6:6;
	unsigned bt7:1;
	unsigned bt8:1;
       };
 union bytt
      {
       struct bytes bits;
       unsigned short chars;
       } bbt;
 bbt.chars=bb[0];
 //printf("%x   %x   %x\n",bitt[0],bitt[1],bitt[2]);
 var=(float)((1.0-2*bbt.bits.bt8)*(float)(bb[1]*256.0+bb[2])/pow(2.0,16.0));
 if(bbt.bits.bt7==1) 
	 bbt.bits.bt6=~bbt.bits.bt6+1;
 var*=(float)(pow(2.0,(1.0-2*bbt.bits.bt7)*bbt.bits.bt6));
 //printf("var=%f\n",var);
 return(var);
}

BOOL Serial::SetDCBParity(HANDLE &CommDev,BYTE Parity)
{
	DCB dcb;
	if(GetCommState(CommDev,&dcb)==FALSE)
	    return FALSE;
	dcb.Parity=Parity;//NOPARITY         
	                  //ODDPARITY
                      //EVENPARITY
                      //MARKPARITY
                      //SPACEPARITY 
	if(SetCommState(CommDev,&dcb)==FALSE) 
	    return FALSE;
	return TRUE;
}


BOOL Serial::SetAd(HANDLE &CommDev, CString sAd)
{
	BOOL bR;
	SetReadTime(CommDev,2500,2,2500);
	BYTE Out[1],In[1];
	Out[0]=BYTE((int)atof(sAd));
	SetDCBParity(CommDev,MARKPARITY);
	Output(CommDev,Out,1);
	bR=Input(CommDev,In,1);
	SetDCBParity(CommDev,SPACEPARITY);
	if(!bR||(In[0]!=BYTE(~Out[0])))
		return FALSE;
	else
	{
		Sleep(10);
		return TRUE;
	}
}

int Serial::bintoint(BYTE *bb)
{
	return(bb[0]+(bb[1]<<8));
}

float Serial::ASCIItof(unsigned char *bb, int n, CString &strTemp)
{
    char cTemp[30];
	for(int i=0;i<n;i++)
		cTemp[i]=bb[i];
	cTemp[i]='\0';
	strTemp=cTemp;
	return (float)atof(cTemp);
}

void Serial::StrToByte(CString strTemp, BYTE bb[], int &iN)
{
	//12.3   ->31 32 2e 33
	iN=strTemp.GetLength();
	for(int i=0;i<iN;i++)
	{
		CString te;
		te=strTemp.Left(i+1);
		bb[i]=*te.Right(1);//@@@@@@@@@@
	}
}

void Serial::SetStatus(CString strTemp)
{
	m_strStatus=strTemp;
	if(m_hWnd!=NULL)
		::PostMessage(m_hWnd,WM_SHOW_STATUS,0,0);
}

// static unsigned short ccitt_table[256] = {
// 	0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50A5, 0x60C6, 0x70E7,
// 		0x8108, 0x9129, 0xA14A, 0xB16B, 0xC18C, 0xD1AD, 0xE1CE, 0xF1EF,
// 		0x1231, 0x0210, 0x3273, 0x2252, 0x52B5, 0x4294, 0x72F7, 0x62D6,
// 		0x9339, 0x8318, 0xB37B, 0xA35A, 0xD3BD, 0xC39C, 0xF3FF, 0xE3DE,
// 		0x2462, 0x3443, 0x0420, 0x1401, 0x64E6, 0x74C7, 0x44A4, 0x5485,
// 		0xA56A, 0xB54B, 0x8528, 0x9509, 0xE5EE, 0xF5CF, 0xC5AC, 0xD58D,
// 		0x3653, 0x2672, 0x1611, 0x0630, 0x76D7, 0x66F6, 0x5695, 0x46B4,
// 		0xB75B, 0xA77A, 0x9719, 0x8738, 0xF7DF, 0xE7FE, 0xD79D, 0xC7BC,
// 		0x48C4, 0x58E5, 0x6886, 0x78A7, 0x0840, 0x1861, 0x2802, 0x3823,
// 		0xC9CC, 0xD9ED, 0xE98E, 0xF9AF, 0x8948, 0x9969, 0xA90A, 0xB92B,
// 		0x5AF5, 0x4AD4, 0x7AB7, 0x6A96, 0x1A71, 0x0A50, 0x3A33, 0x2A12,
// 		0xDBFD, 0xCBDC, 0xFBBF, 0xEB9E, 0x9B79, 0x8B58, 0xBB3B, 0xAB1A,
// 		0x6CA6, 0x7C87, 0x4CE4, 0x5CC5, 0x2C22, 0x3C03, 0x0C60, 0x1C41,
// 		0xEDAE, 0xFD8F, 0xCDEC, 0xDDCD, 0xAD2A, 0xBD0B, 0x8D68, 0x9D49,
// 		0x7E97, 0x6EB6, 0x5ED5, 0x4EF4, 0x3E13, 0x2E32, 0x1E51, 0x0E70,
// 		0xFF9F, 0xEFBE, 0xDFDD, 0xCFFC, 0xBF1B, 0xAF3A, 0x9F59, 0x8F78,
// 		0x9188, 0x81A9, 0xB1CA, 0xA1EB, 0xD10C, 0xC12D, 0xF14E, 0xE16F,
// 		0x1080, 0x00A1, 0x30C2, 0x20E3, 0x5004, 0x4025, 0x7046, 0x6067,
// 		0x83B9, 0x9398, 0xA3FB, 0xB3DA, 0xC33D, 0xD31C, 0xE37F, 0xF35E,
// 		0x02B1, 0x1290, 0x22F3, 0x32D2, 0x4235, 0x5214, 0x6277, 0x7256,
// 		0xB5EA, 0xA5CB, 0x95A8, 0x8589, 0xF56E, 0xE54F, 0xD52C, 0xC50D,
// 		0x34E2, 0x24C3, 0x14A0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
// 		0xA7DB, 0xB7FA, 0x8799, 0x97B8, 0xE75F, 0xF77E, 0xC71D, 0xD73C,
// 		0x26D3, 0x36F2, 0x0691, 0x16B0, 0x6657, 0x7676, 0x4615, 0x5634,
// 		0xD94C, 0xC96D, 0xF90E, 0xE92F, 0x99C8, 0x89E9, 0xB98A, 0xA9AB,
// 		0x5844, 0x4865, 0x7806, 0x6827, 0x18C0, 0x08E1, 0x3882, 0x28A3,
// 		0xCB7D, 0xDB5C, 0xEB3F, 0xFB1E, 0x8BF9, 0x9BD8, 0xABBB, 0xBB9A,
// 		0x4A75, 0x5A54, 0x6A37, 0x7A16, 0x0AF1, 0x1AD0, 0x2AB3, 0x3A92,
// 		0xFD2E, 0xED0F, 0xDD6C, 0xCD4D, 0xBDAA, 0xAD8B, 0x9DE8, 0x8DC9,
// 		0x7C26, 0x6C07, 0x5C64, 0x4C45, 0x3CA2, 0x2C83, 0x1CE0, 0x0CC1,
// 		0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
// 		0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
// };

//输入不带CRC码的数据时，返回值是CRC码
//输入带CRC码的数据时，则可以进行校验，返回0时CRC校验成功，否则CRC校验失败
// WORD Serial::CRC16(BYTE *paucMsg, int size)
// {
// 	typedef unsigned __int16    INT16U;
// 
// 		INT16U shift,data,val;
// 		int i;
// 		
// 		shift = 0xFFFF;
// 		
// 		
// 		for(i=0;i<size;i++)
// 		{
// 			if((i % 8) == 0)
// 				data = (*paucMsg++)<<8;
// 			val = shift ^ data;
// 			shift = shift<<1;
// 			data = data <<1;
// 			if(val&0x8000)
// 				shift = shift ^ 0X8005;
// 		}
// 		return shift;
// 
// 	unsigned short crc = 0;
// 	
// 	while (size-- > 0)
// 		crc = ccitt_table[(crc >> 8 ^ *paucMsg++) & 0xff] ^ (crc << 8);
// 	return ~crc;
// 
// 	unsigned short accum;
// 	static int i;
// 	for (int j = 0; j < size; j++)
// 	{
// 		paucMsg[j]<<=8;
// 		for(i=8;i>0;i--)
// 		{
// 			if((paucMsg[j]^accum)&0x8000)
// 				accum=(accum<<1)^0x8005;
// 			else
// 				accum<<=1;
// 			paucMsg[j]<<=1;
// 		}
// 	}
// 	return (accum);
// 	
// 
//  	unsigned char i;
//  	unsigned char j;
//  	unsigned int u16CRC=0x0000;
//  	unsigned char TT; 
//  	for(j=0;j<size;j++)
//  	{ 
//  		u16CRC=u16CRC ^ paucMsg[j]; 
//  		for(i=0;i<8;i++) 
//  		{ 
//  			TT=u16CRC&1; 
//  			u16CRC=u16CRC>>1; 
// 			u16CRC=u16CRC&0x7fff; 
// 			if (TT==1) 
// 				u16CRC=u16CRC^0xa001; 
// 		}
// 	}
// 	return u16CRC;
// 
// 
// 	typedef union _CRC
// 	{
// 		WORD crc16;
// 		BYTE by[2];
// 	} CRC;
// 
// 	CRC crc;
// 	crc.crc16 = 0x0000;
// 	int i, l;
// 	for (i=0; i<size; i++)
// 	{
// 		BYTE ch = ba[i];
// 		crc.by[0] = crc.by[0] ^ ch;
// 		for (l=0; l<8; l++)
// 		{
// 			if (crc.by[0] & 0x01)
// 			{
// 				crc.crc16 = crc.crc16 >> 1;
// 				crc.crc16 = crc.crc16 ^ 0xa001;
// 			}
// 			else
// 			{
// 				crc.crc16 = crc.crc16 >> 1;
// 			}
// 		}
// 	}
// 	BYTE swap = crc.by[0];
// 	crc.by[0] = crc.by[1];
// 	crc.by[1] = swap;
// 	return crc.crc16;
// }
// 
// static const UCHAR aucCRCHi[] = {
//     0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
// 		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
// 		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
// 		0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
// 		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
// 		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
// 		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
// 		0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
// 		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
// 		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
// 		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
// 		0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
// 		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
// 		0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
// 		0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
// 		0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
// 		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
// 		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
// 		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
// 		0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
// 		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
// 		0x00, 0xC1, 0x81, 0x40
// };
// 
// static const UCHAR aucCRCLo[] = {
//     0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7,
// 		0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E,
// 		0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9,
// 		0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
// 		0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
// 		0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32,
// 		0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D,
// 		0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
// 		0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF,
// 		0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
// 		0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1,
// 		0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
// 		0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB,
// 		0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA,
// 		0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
// 		0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
// 		0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97,
// 		0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E,
// 		0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89,
// 		0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
// 		0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
// 		0x41, 0x81, 0x80, 0x40
// };
// 
// WORD Serial::CRC16(BYTE *paucMsg, int size)
// {
//     UCHAR ucCRCHi = 0x00;
//     UCHAR ucCRCLo = 0x00;
//     int iIndex;
//     while( size-- )
//     {
//         iIndex = ucCRCLo ^ *( paucMsg++ );
//         ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
//         ucCRCHi = aucCRCLo[iIndex];
//     }
//     return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
// }

const WORD crc_tab[]={0x0000,0x1021,0x2042,0x3063,0x4084,0x50a5,0x60c6,0x70e7,
									0x8108,0x9129,0xa14a,0xb16b,0xc18c,0xd1ad,0xe1ce,0xf1ef};

WORD Serial::CRC16(BYTE *paucMsg, int size)
{
	WORD crc;
	char da;
	crc = 0;
	while(size-- != 0)
	{
		da = ((unsigned char)(crc / 256)) / 16;
		crc <<= 4;
		crc ^= crc_tab[da ^(*paucMsg / 16)];
		da = ((unsigned char)(crc / 256)) / 16;
		crc <<= 4;
		crc ^= crc_tab[da ^(*paucMsg & 0x0f)];
		paucMsg++;		
	}
	return(crc);
}

float Serial::Tof(BYTE *bb,BOOL bF)
{
	float f;
	unsigned char *pa;
	pa=(unsigned char*)&f;
	if(!bF)
	{
		*(pa+0)=bb[3];
		*(pa+1)=bb[2];
		*(pa+2)=bb[1];
		*(pa+3)=bb[0];
	}
	else
	{
		*(pa+0)=bb[0];
		*(pa+1)=bb[1];
		*(pa+2)=bb[2];
		*(pa+3)=bb[3];
	}

// 	union
// 	{
// 		unsigned char uc[4];
// 		long lda;
// 		unsigned long ul;
// 		float fda;
// 	}un_4b;
// 
// 	un_4b.uc[0]=bb[0];
// 	un_4b.uc[1]=bb[1];
// 	un_4b.uc[2]=bb[2];
// 	un_4b.uc[3]=bb[3];
// 	f=un_4b.fda;

	
	return f;
}

