#if !defined(AFX__GRID_H__88E9E31F_2F58_4293_8C0C_8CB3EAC5D372__INCLUDED_)
#define AFX__GRID_H__88E9E31F_2F58_4293_8C0C_8CB3EAC5D372__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


// Dispatch interfaces referenced by this interface
class C_Cell;
class C_Calendar;
class C_Chart;
class C_Column;
class C_ComboBox;
class COleFont;
class C_HPageBreaks;
class C_Images;
class C_PageSetup;
class C_Range;
class C_ReportTitles;
class C_Selection;
class C_VPageBreaks;

/////////////////////////////////////////////////////////////////////////////
// C_Grid wrapper class

class C_Grid : public CWnd
{
protected:
	DECLARE_DYNCREATE(C_Grid)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x2bdd96a9, 0x1455, 0x4da8, { 0x83, 0xbc, 0xf4, 0x3d, 0x47, 0xa7, 0xe, 0xb6 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:

// Operations
public:
	C_Cell GetActiveCell();
	BOOL GetAllowUserReorderColumn();
	void SetAllowUserReorderColumn(BOOL bNewValue);
	BOOL GetAllowUserResizing();
	void SetAllowUserResizing(BOOL bNewValue);
	BOOL GetAllowUserSort();
	void SetAllowUserSort(BOOL bNewValue);
	long GetAppearance();
	void SetAppearance(long nNewValue);
	BOOL GetAutoRedraw();
	void SetAutoRedraw(BOOL bNewValue);
	unsigned long GetBackColor1();
	void SetBackColor1(unsigned long newValue);
	unsigned long GetBackColor2();
	void SetBackColor2(unsigned long newValue);
	unsigned long GetBackColorActiveCellSel();
	void SetBackColorActiveCellSel(unsigned long newValue);
	unsigned long GetBackColorBkg();
	void SetBackColorBkg(unsigned long newValue);
	unsigned long GetBackColorFixed();
	void SetBackColorFixed(unsigned long newValue);
	unsigned long GetBackColorFixedSel();
	void SetBackColorFixedSel(unsigned long newValue);
	unsigned long GetBackColorScrollBar();
	void SetBackColorScrollBar(unsigned long newValue);
	unsigned long GetBackColorSel();
	void SetBackColorSel(unsigned long newValue);
	BOOL GetBoldFixedCell();
	void SetBoldFixedCell(BOOL bNewValue);
	unsigned long GetBorderColor();
	void SetBorderColor(unsigned long newValue);
	long GetBottomRow();
	BOOL GetButtonLocked();
	void SetButtonLocked(BOOL bNewValue);
	C_Calendar GetCalendar();
	C_Cell Cell(long Row, long Col);
	unsigned long GetCellBorderColor();
	void SetCellBorderColor(unsigned long newValue);
	unsigned long GetCellBorderColorFixed();
	void SetCellBorderColorFixed(unsigned long newValue);
	C_Chart Chart(long Row, long Col);
	long GetCols();
	void SetCols(long nNewValue);
	C_Column Column(long Col);
	C_ComboBox ComboBox(long Col);
	long GetDateFormat();
	void SetDateFormat(long nNewValue);
	COleFont GetDefaultFont();
	void SetRefDefaultFont(LPDISPATCH newValue);
	short GetDefaultRowHeight();
	void SetDefaultRowHeight(short nNewValue);
	BOOL GetDisplayClientBorder();
	void SetDisplayClientBorder(BOOL bNewValue);
	BOOL GetDisplayErrorMessage();
	void SetDisplayErrorMessage(BOOL bNewValue);
	BOOL GetDisplayFocusRect();
	void SetDisplayFocusRect(BOOL bNewValue);
	BOOL GetDisplayRowIndex();
	void SetDisplayRowIndex(BOOL bNewValue);
	long GetDrawMode();
	void SetDrawMode(long nNewValue);
	BOOL GetShowResizeTips();
	void SetShowResizeTips(BOOL bNewValue);
	BOOL GetEnabled();
	void SetEnabled(BOOL bNewValue);
	BOOL GetEnableVisualStyles();
	void SetEnableVisualStyles(BOOL bNewValue);
	long GetEnterKeyMoveTo();
	void SetEnterKeyMoveTo(long nNewValue);
	BOOL GetExtendLastCol();
	void SetExtendLastCol(BOOL bNewValue);
	CString GetFilename();
	long GetFixedCols();
	void SetFixedCols(long nNewValue);
	long GetFixedRowColStyle();
	void SetFixedRowColStyle(long nNewValue);
	long GetFixedRows();
	void SetFixedRows(long nNewValue);
	unsigned long GetForeColorFixed();
	void SetForeColorFixed(unsigned long newValue);
	long GetFrozenRows();
	void SetFrozenRows(long nNewValue);
	long GetFrozenCols();
	void SetFrozenCols(long nNewValue);
	unsigned long GetGridColor();
	void SetGridColor(unsigned long newValue);
	BOOL GetGridLiness();
	void SetGridLiness(BOOL bNewValue);
	C_HPageBreaks GetHPageBreaks();
	BOOL GetHScrollBarIsVisible();
	long GetHWnd();
	C_Images GetImages();
	CString GetLastErrorMessage();
	void SetLastErrorMessage(LPCTSTR lpszNewValue);
	long GetLeftCol();
	void SetLeftCol(long nNewValue);
	long GetMouseCol();
	long GetMouseRow();
	BOOL GetMultiSelect();
	void SetMultiSelect(BOOL bNewValue);
	C_PageSetup GetPageSetup();
	C_Range Range(long FirstRow, long FirstCol, long LastRow, long LastCol);
	BOOL GetReadOnly();
	void SetReadOnly(BOOL bNewValue);
	long GetReadOnlyFocusRect();
	void SetReadOnlyFocusRect(long nNewValue);
	C_ReportTitles GetReportTitles();
	long GetRowHeight(long Row);
	void SetRowHeight(long Row, long nNewValue);
	long GetRightCol();
	long GetRows();
	void SetRows(long nNewValue);
	long GetScrollBars();
	void SetScrollBars(long nNewValue);
	long GetScrollBarStyle();
	void SetScrollBarStyle(long nNewValue);
	C_Selection GetSelection();
	long GetSelectionMode();
	void SetSelectionMode(long nNewValue);
	unsigned long GetSelectionBorderColor();
	void SetSelectionBorderColor(unsigned long newValue);
	short GetSelLength();
	void SetSelLength(short nNewValue);
	short GetSelStart();
	void SetSelStart(short nNewValue);
	long GetStartRowNumber();
	void SetStartRowNumber(long nNewValue);
	long GetTopRow();
	void SetTopRow(long nNewValue);
	long GetTotalPages();
	C_VPageBreaks GetVPageBreaks();
	BOOL GetVScrollBarIsVisible();
	void AboutBox();
	void AddChart(long Row, long Col);
	void AddItem(LPCTSTR Text, BOOL DrawCell);
	VARIANT AutoFitRowHeight(long Row);
	void ClosePrintPreviewWindow();
	BOOL DirectPrint(const VARIANT& PageNo);
	BOOL ExportToHTML(LPCTSTR Filename);
	BOOL ExportToXML(LPCTSTR Filename);
	CString ExportToXMLString();
	BOOL ExportToCSV(LPCTSTR Filename, BOOL ExportFixedRow, BOOL ExportFixedCol);
	BOOL ExportToExcel(LPCTSTR Filename, BOOL ExportFixedRow, BOOL ExportFixedCol);
	BOOL LoadFromXML(LPCTSTR strFileName);
	BOOL LoadFromXMLString(LPCTSTR strXML);
	BOOL NewFile();
	C_Cell HitTest(long X, long Y);
	BOOL HttpDownloadFile(LPCTSTR strURL, LPCTSTR strFileName);
	BOOL HttpOpenFile(LPCTSTR strURL);
	BOOL HttpLoadFromXML(LPCTSTR strURL);
	BOOL OpenFile(LPCTSTR strFileName);
	void InsertCol(long StartCol, long Count);
	void InsertRow(long StartRow, long Count);
	BOOL PrintDialog();
	void PrintPreview(const VARIANT& Zoom);
	void PrintPreviewVirtualGrid(const VARIANT& Zoom);
	void Refresh();
	void RemoveChart(long Row, long Col);
	void RemoveItem(long Index);
	BOOL SaveChartAsBitmap(long Row, long Col, LPCTSTR strFileName);
	BOOL SaveFile(LPCTSTR strFileName);
	BOOL SetRegisterInformation(LPCTSTR RegisteredOwner, LPCTSTR SerialNumber);
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX__GRID_H__88E9E31F_2F58_4293_8C0C_8CB3EAC5D372__INCLUDED_)
