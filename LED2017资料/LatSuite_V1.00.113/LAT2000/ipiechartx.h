#if !defined(AFX_IPIECHARTX_H__9D8D27D8_7CC2_46A6_8F83_FAAF8D9BC895__INCLUDED_)
#define AFX_IPIECHARTX_H__9D8D27D8_7CC2_46A6_8F83_FAAF8D9BC895__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


// Dispatch interfaces referenced by this interface
class COleFont;

/////////////////////////////////////////////////////////////////////////////
// CiPieChartX wrapper class

class CiPieChartX : public CWnd
{
protected:
	DECLARE_DYNCREATE(CiPieChartX)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xb7261f64, 0xd336, 0x11d3, { 0x85, 0xc2, 0x0, 0xa0, 0xcc, 0x3a, 0x58, 0xc9 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:

// Operations
public:
	long GetItemCount();
	long GetOuterMargin();
	void SetOuterMargin(long nNewValue);
	long GetStartDegrees();
	void SetStartDegrees(long nNewValue);
	COleFont GetLegendFont();
	void SetLegendFont(LPDISPATCH newValue);
	long GetLegendMargin();
	void SetLegendMargin(long nNewValue);
	CString GetTitleText();
	void SetTitleText(LPCTSTR lpszNewValue);
	long GetTitleMargin();
	void SetTitleMargin(long nNewValue);
	COleFont GetTitleFont();
	void SetTitleFont(LPDISPATCH newValue);
	long GetTitleHorizontalAlignment();
	void SetTitleHorizontalAlignment(long nNewValue);
	BOOL GetLegendShowValue();
	void SetLegendShowValue(BOOL bNewValue);
	BOOL GetLegendShowPercent();
	void SetLegendShowPercent(BOOL bNewValue);
	long GetLegendValuePrecision();
	void SetLegendValuePrecision(long nNewValue);
	long GetLegendValueMargin();
	void SetLegendValueMargin(long nNewValue);
	long GetLegendPercentPrecision();
	void SetLegendPercentPrecision(long nNewValue);
	long GetLegendPercentMargin();
	void SetLegendPercentMargin(long nNewValue);
	unsigned long GetBackGroundColor();
	void SetBackGroundColor(unsigned long newValue);
	long GetBorderStyle();
	void SetBorderStyle(long nNewValue);
	void AboutBox();
	unsigned long GetLegendFontColor();
	void SetLegendFontColor(unsigned long newValue);
	void ShowPropertyEditor();
	unsigned long GetTitleFontColor();
	void SetTitleFontColor(unsigned long newValue);
	void AddItem(LPCTSTR Title, unsigned long Color, double Value);
	void RemoveItem(long Index);
	void ClearList();
	long Get__ItemCount();
	CString GetItemTitle(long Index);
	unsigned long GetItemColor(long Index);
	double GetItemValue(long Index);
	void SetItemTitle(long Index, LPCTSTR Title);
	void SetItemColor(long Index, unsigned long Color);
	void SetItemValue(long Index, double Value);
	BOOL GetEnabled();
	void SetEnabled(BOOL bNewValue);
	BOOL GetTransparent();
	void SetTransparent(BOOL bNewValue);
	void RepaintAll();
	void BeginUpdate();
	void EndUpdate();
	void Lock();
	void Unlock();
	long GetUpdateFrameRate();
	void SetUpdateFrameRate(long nNewValue);
	long GetComponentHandle();
	void SaveImageToBitmap(LPCTSTR FileName);
	void SaveImageToMetaFile(LPCTSTR FileName);
	void SaveImageToJPEG(LPCTSTR FileName, long Compression, BOOL Progressive);
	long OPCAddItem();
	long OPCItemCount();
	void OPCRemoveAllItems();
	void OPCItemActivate(long Index);
	void OPCItemDeactivate(long Index);
	CString GetOPCItemComputerName(long Index);
	CString GetOPCItemServerName(long Index);
	CString GetOPCItemItemName(long Index);
	CString GetOPCItemPropertyName(long Index);
	BOOL GetOPCItemAutoConnect(long Index);
	long GetOPCItemUpdateRate(long Index);
	void SetOPCItemComputerName(long Index, LPCTSTR Value);
	void SetOPCItemServerName(long Index, LPCTSTR Value);
	void SetOPCItemItemName(long Index, LPCTSTR Value);
	void SetOPCItemPropertyName(long Index, LPCTSTR Value);
	void SetOPCItemAutoConnect(long Index, BOOL Value);
	void SetOPCItemUpdateRate(long Index, long Value);
	void OPCItemLoaded(long Index);
	long GetObjectPointer();
	VARIANT GetBytesJPEG(long Compression, BOOL Progressive);
	void SavePropertiesToFile(LPCTSTR FileName);
	void LoadPropertiesFromFile(LPCTSTR FileName);
	BOOL GetOptionSaveAllProperties();
	void SetOptionSaveAllProperties(BOOL bNewValue);
	BOOL GetAutoFrameRate();
	void SetAutoFrameRate(BOOL bNewValue);
	void iPaintToDC(long X, long Y, BOOL Transparent, long DC);
	BOOL GetVisible();
	void SetVisible(BOOL bNewValue);
	long GetWidth();
	void SetWidth(long nNewValue);
	long GetHeight();
	void SetHeight(long nNewValue);
	void OPCItemUpdateResume(long Index);
	void OPCItemUpdateSuspend(long Index);
	VARIANT GetOPCItemData(long Index);
	short GetOPCItemQuality(long Index);
	double GetOPCItemTimeStamp(long Index);
	void SetOPCItemData(long Index, const VARIANT& Value);
	BOOL GetOPCItemActive(long Index);
	CString GetOPCItemGroupName(long Index);
	void SetOPCItemGroupName(long Index, LPCTSTR Value);
	void OPCDeleteItem(long Index);
	void OPCItemActivateSuspend(long Index);
	VARIANT GetBytesPNG(long Compression);
	void SaveImageToPNG(LPCTSTR FileName, long Compression);
	VARIANT GetOPCItemDataNow(long Index, short* Quality);
	BOOL GetOPCItemUpdateSuspended(long Index);
	double GetOPCItemScalar(long Index);
	double GetOPCItemOffset(long Index);
	void SetOPCItemScalar(long Index, double Value);
	void SetOPCItemOffset(long Index, double Value);
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_IPIECHARTX_H__9D8D27D8_7CC2_46A6_8F83_FAAF8D9BC895__INCLUDED_)
