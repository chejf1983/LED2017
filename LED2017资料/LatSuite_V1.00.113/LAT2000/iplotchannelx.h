#if !defined(AFX_IPLOTCHANNELX_H__A39FC1E8_9461_40CD_8363_D845982CE2D7__INCLUDED_)
#define AFX_IPLOTCHANNELX_H__A39FC1E8_9461_40CD_8363_D845982CE2D7__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


// Dispatch interfaces referenced by this interface
class COleFont;

/////////////////////////////////////////////////////////////////////////////
// CiPlotChannelX wrapper class

class CiPlotChannelX : public COleDispatchDriver
{
public:
	CiPlotChannelX() {}		// Calls COleDispatchDriver default constructor
	CiPlotChannelX(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CiPlotChannelX(const CiPlotChannelX& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
	CString GetName();
	void SetName(LPCTSTR lpszNewValue);
	BOOL GetVisible();
	void SetVisible(BOOL bNewValue);
	CString GetTitleText();
	void SetTitleText(LPCTSTR lpszNewValue);
	unsigned long GetColor();
	void SetColor(unsigned long newValue);
	BOOL GetVisibleInLegend();
	void SetVisibleInLegend(BOOL bNewValue);
	long GetRingBufferSize();
	void SetRingBufferSize(long nNewValue);
	BOOL GetTraceVisible();
	void SetTraceVisible(BOOL bNewValue);
	long GetTraceLineStyle();
	void SetTraceLineStyle(long nNewValue);
	long GetTraceLineWidth();
	void SetTraceLineWidth(long nNewValue);
	BOOL GetMarkersVisible();
	void SetMarkersVisible(BOOL bNewValue);
	long GetMarkersSize();
	void SetMarkersSize(long nNewValue);
	long GetMarkersStyle();
	void SetMarkersStyle(long nNewValue);
	unsigned long GetMarkersPenColor();
	void SetMarkersPenColor(unsigned long newValue);
	BOOL GetMarkersPenUseChannelColor();
	void SetMarkersPenUseChannelColor(BOOL bNewValue);
	long GetMarkersPenStyle();
	void SetMarkersPenStyle(long nNewValue);
	long GetMarkersPenWidth();
	void SetMarkersPenWidth(long nNewValue);
	unsigned long GetMarkersBrushColor();
	void SetMarkersBrushColor(unsigned long newValue);
	BOOL GetMarkersBrushUseChannelColor();
	void SetMarkersBrushUseChannelColor(BOOL bNewValue);
	long GetMarkersBrushStyle();
	void SetMarkersBrushStyle(long nNewValue);
	CString GetXAxisName();
	void SetXAxisName(LPCTSTR lpszNewValue);
	CString GetYAxisName();
	void SetYAxisName(LPCTSTR lpszNewValue);
	BOOL GetXAxisTrackingEnabled();
	void SetXAxisTrackingEnabled(BOOL bNewValue);
	BOOL GetYAxisTrackingEnabled();
	void SetYAxisTrackingEnabled(BOOL bNewValue);
	long GetCount();
	void SetCount(long nNewValue);
	double GetDataX(long Index);
	void SetDataX(long Index, double newValue);
	double GetDataY(long Index);
	void SetDataY(long Index, double newValue);
	BOOL GetDataNull(long Index);
	void SetDataNull(long Index, BOOL bNewValue);
	long AddXY(double X, double Y);
	void Clear();
	void SavePropertiesToFile(LPCTSTR FileName);
	void LoadPropertiesFromFile(LPCTSTR FileName);
	void SaveDataToFile(LPCTSTR FileName);
	void LoadDataFromFile(LPCTSTR FileName, BOOL ClearPreviousData);
	void LogActivate(BOOL Append);
	void LogDeactivate();
	CString GetLogFileName();
	void SetLogFileName(LPCTSTR lpszNewValue);
	long GetLogBufferSize();
	void SetLogBufferSize(long nNewValue);
	BOOL GetLoggingActive();
	double GetXMin();
	double GetXMax();
	double GetXMean();
	double GetYMin();
	double GetYMax();
	double GetYMean();
	BOOL GetDataMarkerShow(long Index);
	void SetDataMarkerShow(long Index, BOOL bNewValue);
	long GetDataMarkerStyle(long Index);
	void SetDataMarkerStyle(long Index, long nNewValue);
	BOOL GetMarkersAllowIndividual();
	void SetMarkersAllowIndividual(BOOL bNewValue);
	BOOL GetEnabled();
	void SetEnabled(BOOL bNewValue);
	BOOL GetPopupEnabled();
	void SetPopupEnabled(BOOL bNewValue);
	void AddXYArrays(const VARIANT& XData, const VARIANT& YData);
	VARIANT GetTag();
	void SetTag(const VARIANT& newValue);
	BOOL GetDataEmpty(long Index);
	void SetDataEmpty(long Index, BOOL bNewValue);
	double GetRunningYMin();
	double GetRunningYMax();
	double GetRunningYMean();
	CString GetOPCComputerName();
	void SetOPCComputerName(LPCTSTR lpszNewValue);
	CString GetOPCServerName();
	void SetOPCServerName(LPCTSTR lpszNewValue);
	CString GetOPCItemName();
	void SetOPCItemName(LPCTSTR lpszNewValue);
	long GetOPCUpdateRate();
	void SetOPCUpdateRate(long nNewValue);
	BOOL GetOPCAutoConnect();
	void SetOPCAutoConnect(BOOL bNewValue);
	void OPCActivate();
	void OPCDeactivate();
	long GetDrawStartIndex();
	long GetDrawStopIndex();
	long GetMarkersTurnOffLimit();
	void SetMarkersTurnOffLimit(long nNewValue);
	void DeletePoints(long Size);
	long GetDataStyle();
	void SetDataStyle(long nNewValue);
	long GetDataPointSize();
	long GetMaxDataPoints();
	long GetCapacity();
	long GetMemoryUsed();
	void AddXYArray(const VARIANT& Data);
	unsigned long GetDataTraceLineColor(long Index);
	void SetDataTraceLineColor(long Index, unsigned long newValue);
	long GetDataTraceLineWidth(long Index);
	void SetDataTraceLineWidth(long Index, long nNewValue);
	long GetDataTraceLineStyle(long Index);
	void SetDataTraceLineStyle(long Index, long nNewValue);
	long GetDataMarkerSize(long Index);
	void SetDataMarkerSize(long Index, long nNewValue);
	unsigned long GetDataMarkerPenColor(long Index);
	void SetDataMarkerPenColor(long Index, unsigned long newValue);
	long GetDataMarkerPenStyle(long Index);
	void SetDataMarkerPenStyle(long Index, long nNewValue);
	long GetDataMarkerPenWidth(long Index);
	void SetDataMarkerPenWidth(long Index, long nNewValue);
	unsigned long GetDataMarkerBrushColor(long Index);
	void SetDataMarkerBrushColor(long Index, unsigned long newValue);
	long GetDataMarkerBrushStyle(long Index);
	void SetDataMarkerBrushStyle(long Index, long nNewValue);
	long GetLayer();
	void SetLayer(long nNewValue);
	double GetRunningXMin();
	double GetRunningXMax();
	double GetRunningXMean();
	CString GetDataCursorXText();
	CString GetDataCursorYText();
	double GetDataCursorXValue();
	double GetDataCursorYValue();
	long GetDataCursorStatus();
	BOOL GetUserSelected();
	void SetUserSelected(BOOL bNewValue);
	COleFont GetMarkersFont();
	void SetMarkersFont(LPDISPATCH newValue);
	unsigned long GetMarkersFontColor();
	void SetMarkersFontColor(unsigned long newValue);
	CString GetDataMarkerCharacter(long Index);
	void SetDataMarkerCharacter(long Index, LPCTSTR lpszNewValue);
	BOOL GetDataMarkerShowing(long Index);
	void ReCalcRunningMinMaxMean();
	double GetDataXDrawMax(long Index);
	double GetDataXDrawMin(long Index);
	double GetDataYDrawMax(long Index);
	double GetDataYDrawMin(long Index);
	CString GetXValueText(double Value);
	CString GetYValueText(double Value);
	void GetXYEmptyNull(long Index, double X, double Y, BOOL* Empty, BOOL* Null);
	CString GetOPCGroupName();
	void SetOPCGroupName(LPCTSTR lpszNewValue);
	void OPCActivateSuspend();
	void OPCUpdateResume();
	void OPCUpdateSuspend();
	BOOL GetOPCActive();
	BOOL GetOPCQualityGood();
	BOOL HitTest(long X, long Y);
	BOOL GetFillEnabled();
	void SetFillEnabled(BOOL bNewValue);
	double GetFillReference();
	void SetFillReference(double newValue);
	long GetFillStyle();
	void SetFillStyle(long nNewValue);
	unsigned long GetFillColor();
	void SetFillColor(unsigned long newValue);
	BOOL GetFillUseChannelColor();
	void SetFillUseChannelColor(BOOL bNewValue);
	double GetElapsedStartTime();
	void SetElapsedStartTime(double newValue);
	BOOL GetYInterpolated(double XValue, double* YValue);
	long AddXNull(double X);
	long AddYNow(double Y);
	long AddYElapsedTime(double Y);
	void ResetElapsedStartTime();
	long AddYElapsedSeconds(double Y);
	BOOL GetDigitalEnabled();
	void SetDigitalEnabled(BOOL bNewValue);
	long GetDigitalReferenceStyle();
	void SetDigitalReferenceStyle(long nNewValue);
	double GetDigitalReferenceLow();
	void SetDigitalReferenceLow(double newValue);
	double GetDigitalReferenceHigh();
	void SetDigitalReferenceHigh(double newValue);
	void AddYArray(double XInterval, const VARIANT& YData);
	BOOL GetFastDrawEnabled();
	void SetFastDrawEnabled(BOOL bNewValue);
	long AddXEmpty(double X);
	long GetInterpolationStyle();
	void SetInterpolationStyle(long nNewValue);
	long GetOPCXValueSource();
	void SetOPCXValueSource(long nNewValue);
	BOOL GetBarEnabled();
	void SetBarEnabled(BOOL bNewValue);
	double GetBarWidth();
	void SetBarWidth(double newValue);
	double GetBarReference();
	void SetBarReference(double newValue);
	unsigned long GetBarPenColor();
	void SetBarPenColor(unsigned long newValue);
	BOOL GetBarPenUseChannelColor();
	void SetBarPenUseChannelColor(BOOL bNewValue);
	long GetBarPenStyle();
	void SetBarPenStyle(long nNewValue);
	long GetBarPenWidth();
	void SetBarPenWidth(long nNewValue);
	unsigned long GetBarBrushColor();
	void SetBarBrushColor(unsigned long newValue);
	BOOL GetBarBrushUseChannelColor();
	void SetBarBrushUseChannelColor(BOOL bNewValue);
	long GetBarBrushStyle();
	void SetBarBrushStyle(long nNewValue);
	BOOL GetDataBarVisible(long Index);
	void SetDataBarVisible(long Index, BOOL bNewValue);
	double GetDataBarReference(long Index);
	void SetDataBarReference(long Index, double newValue);
	double GetDataBarWidth(long Index);
	void SetDataBarWidth(long Index, double newValue);
	unsigned long GetDataBarPenColor(long Index);
	void SetDataBarPenColor(long Index, unsigned long newValue);
	long GetDataBarPenWidth(long Index);
	void SetDataBarPenWidth(long Index, long nNewValue);
	long GetDataBarPenStyle(long Index);
	void SetDataBarPenStyle(long Index, long nNewValue);
	unsigned long GetDataBarBrushColor(long Index);
	void SetDataBarBrushColor(long Index, unsigned long newValue);
	long GetDataBarBrushStyle(long Index);
	void SetDataBarBrushStyle(long Index, long nNewValue);
	BOOL GetHighLowEnabled();
	void SetHighLowEnabled(BOOL bNewValue);
	unsigned long GetHighLowBarColor();
	void SetHighLowBarColor(unsigned long newValue);
	double GetHighLowBarWidth();
	void SetHighLowBarWidth(double newValue);
	BOOL GetHighLowOpenShow();
	void SetHighLowOpenShow(BOOL bNewValue);
	unsigned long GetHighLowOpenColor();
	void SetHighLowOpenColor(unsigned long newValue);
	double GetHighLowOpenWidth();
	void SetHighLowOpenWidth(double newValue);
	double GetHighLowOpenHeight();
	void SetHighLowOpenHeight(double newValue);
	BOOL GetHighLowCloseShow();
	void SetHighLowCloseShow(BOOL bNewValue);
	unsigned long GetHighLowCloseColor();
	void SetHighLowCloseColor(unsigned long newValue);
	double GetHighLowCloseWidth();
	void SetHighLowCloseWidth(double newValue);
	double GetHighLowCloseHeight();
	void SetHighLowCloseHeight(double newValue);
	long AddHighLow(double X, double High, double Low, double Open, double Close);
	double GetDataHigh(long Index);
	void SetDataHigh(long Index, double newValue);
	double GetDataLow(long Index);
	void SetDataLow(long Index, double newValue);
	double GetDataOpen(long Index);
	void SetDataOpen(long Index, double newValue);
	double GetDataClose(long Index);
	void SetDataClose(long Index, double newValue);
	long GetHighLowStyle();
	void SetHighLowStyle(long nNewValue);
	unsigned long GetHighLowShadowColor();
	void SetHighLowShadowColor(unsigned long newValue);
	unsigned long GetHighLowBullishColor();
	void SetHighLowBullishColor(unsigned long newValue);
	unsigned long GetHighLowBearishColor();
	void SetHighLowBearishColor(unsigned long newValue);
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_IPLOTCHANNELX_H__A39FC1E8_9461_40CD_8363_D845982CE2D7__INCLUDED_)
